{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "#include <stdio.h>\nstruct list_node\n{\n\tint data;\n\tstruct list_node * next;\n};\ntypedef struct list_node T_LIST;\n{\n\tif(NULL == head)\n\t{\n\t\tprintf(\"head is null \\r\\n\");\n\t\treturn;\n\t}\n\thead->next = NULL;\t\n}\nT_LIST* list_alloc(void)\n{\n\tT_LIST *P = (T_LIST*)malloc(sizeof(T_LIST));\n\tif(p)\n\t\t{\n\t\t\tprintf(\"memory not enough\\r\\n\");\n\t\t\treturn;\n\t\t}\n\treturn p;\n}\n\nT_LIST* list_data_pos(T_LIST *head,int data)\n{\n\tT_LIST *p = head;\n\tint target = data;\n\twhile(p)\n\t{\n\t\tif(target == (p->data)\n\t\t\tbreak;\n\t\tp = p->next;\n\t}\n\treturn p;\n\n}\nT_LIST* list_insert_end(T_LIST *head,T_LIST *next)\n{\n\tT_LIST *p = head;\n\twhile(p)\n\t{\n\t\tp = p->next;\n\t}\n\tif(p==NULL)\n\t{\n\t\tp->next = next; \n\t}\n}\nT_LIST* list_insert_pos(T_LIST *head,T_LIST *pos,T_LIST *target)\n{\n\t\tT_LIST * p = head;\n\t\tT_LIST * pre;\n\t\twhile(p)\n\t\t{\n\t\t\tif(p == pos)\n\t\t\t{\n\t\t\t\ttarget->next = p;\n\t\t\t\tpre->next = target;\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\tpre = p;\n\t\t\tp = p->next;\n\t\t}\n\t\treturn p;\n}\nvoid list_delete_end(T_LIST *head)\n{\n\tT_LIST *p  \t= head;\n\tT_LIST *pre = head;\n\twhile(p)\n\t{\n\t\tpre = p;\n\t\tp = p->next;\n\t}\n\tfree(p);\n}\nvoid list_destroy(T_LIST *head)\n{\n\tfree(head);\n}\nvoid printf_list(T_LIST *head)\n{\n\tT_LIST *p = head;\n\tint i = 0;\n\twhile(p)\n\t{\n\t\tprintf(\"data[%d] = %d\\r\\n\",p->data);\n\t\ti++;\n\t}\n}\n\n/**\n * [main description]\n * @param  argc [description]\n * @param  argv [description]\n * @return      [description]\n */\nvoid int main(int argc, char const *argv[])\n{\n\tint i;\n\tT_LIST* head;\n\tinit_list(head);\n\tfor(i = 0; i < 10; i++)\n\t{\n\t\tT_LIST* p1 =  list_alloc();\n\t\tp->data = i+2;\n\t\tlist_insert_end(head,p1);\n\t}\n\tprintf_list(head);\n\tlist_destroy(head);d\n\treturn 0;\n}\n\n\n\nimport urllib.request,os; \npf = 'Package Control.sublime-package'; \nipp = sublime.installed_packages_path(); \nurllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); \nopen(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"file": "link_list/list.c",
			"file_size": 1708,
			"file_write_time": 131240131028865839,
			"settings":
			{
				"buffer_size": 1921,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 104.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 384.0
	},
	"console":
	{
		"height": 251.0,
		"history":
		[
			"ctags -R -f",
			"open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); ",
			"ipp = sublime.installed_packages_path(); ",
			"pf = 'Package Control.sublime-package';",
			"import urllib.request,os; ",
			" pf = 'Package Control.sublime-package';",
			"import urllib.request,os;",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Asourcecode/c_code/practice_data_structure"
	],
	"file_history":
	[
	],
	"find":
	{
		"height": 49.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "link_list/list.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1921,
						"regions":
						{
						},
						"selection":
						[
							[
								1586,
								1586
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3502.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "practice.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
